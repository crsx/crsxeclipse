module net.sf.crsx.xtext.GenerateCrsx

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var projectName = "net.sf.crsx.xtext.Crsx"
var grammarURI = "platform:/resource/${projectName}/src/net/sf/crsx/xtext/Crsx.xtext"
var file.extensions = "crs,term"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
        // use an XtextResourceset throughout the process, which is able to resolve classpath:/ URIs.
        resourceSet = org.eclipse.xtext.resource.XtextResourceSet:theResourceSet {}

        // add mappings from platform:/resource to classpath:/
        uriMap = {
          from = "platform:/resource/org.eclipse.xtext.xbase/"
          to = "classpath:/"
        }
        uriMap = {
          from = "platform:/resource/org.eclipse.xtext.common.types/"
          to = "classpath:/"
        }

        platformUri = ".."
        // The following two lines can be removed, if Xbase is not used.
        //registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
        //registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
    	//registerGeneratedEPackage = "net.sf.crsx.xtext.text.TextPackage"
        //registerGenModelFile = "platform:/resource/net.sf.crsx.xtext.Text/src-gen/net/sf/crsx/xtext/Text.genmodel"
        // Register FIX
        //registerGeneratedEPackage = "com.ibm.refil.xtext.fix.fix.FixPackage" 
        //registerGenModelFile = "platform:/resource/com.ibm.refil.xtext.fix/src-gen/com/ibm/refil/xtext/fix/Fix.genmodel"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}.ui/src-gen"
    }

    component = Generator {
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
        pathTestProject = "${runtimeProject}.tests"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"
        language = {
            uri = grammarURI
            fileExtensions = file.extensions

            // Java API to access grammar elements (required by several other fragments)
            fragment = grammarAccess.GrammarAccessFragment {
			//	xmlVersion = "1.0"
            }

            // generates Java API for the generated EPackages
            fragment = ecore.EcoreGeneratorFragment {
            // referencedGenModels = "
            //  platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel,
            //  platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel
            // "
            }

            // Serializer 2.0
            fragment = serializer.SerializerFragment {
            	generateStub = false
            }
            
            // the serialization component (1.0)
            // fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

            // a custom ResourceFactory for use with EMF
            fragment = resourceFactory.ResourceFactoryFragment {
                fileExtensions = file.extensions
            }

            
            fragment = org.eclipse.xtext.generator.parser.antlr.ex.rt.AntlrGeneratorFragment {
                options = {
                    backtrack = false
                    backtrackLexer = false
                }
            }
            
            // Custom Antlr lexer
            fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
                lexerGrammar = "net.sf.crsx.xtext.lexer.CrsxCustomLexer"
                runtime = true
                antlrParam = "-lib"
                // This is the folder where the lexer will be created
                antlrParam = "${runtimeProject}/src-gen/net/sf/crsx/xtext/lexer"
            }

            // java-based API for validation
            fragment = validation.JavaValidatorFragment {
            //    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
            //    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }

            // scoping and exporting API
            // fragment = scoping.ImportURIScopingFragment {}
            // fragment = exporting.SimpleNamesFragment {}

            // scoping and exporting API
            fragment = scoping.ImportNamespacesScopingFragment {}
            fragment = exporting.QualifiedNamesFragment {}
            fragment = builder.BuilderIntegrationFragment {}

            // generator API
            fragment = generator.GeneratorFragment {
                generateMwe = false
                generateJavaMain = false
            }

            // formatter API
            fragment = formatting.FormatterFragment {}

            // labeling API
            fragment = labeling.LabelProviderFragment {}

            // outline API
            fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}

            // quickfix API
            fragment = quickfix.QuickfixProviderFragment {}

            // content assist API
            fragment = contentAssist.JavaBasedContentAssistFragment {}

            // generates a more lightweight Antlr parser and lexer tailored for content assist
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}

            // generates junit test support classes into Generator#pathTestProject
            fragment = junit.Junit4Fragment {}

            // project wizard (optional)
            // fragment = projectWizard.SimpleProjectWizardFragment {
            //      generatorProjectName = "${projectName}"
            //      modelFileExtension = file.extensions
            // }

            // rename refactoring
            fragment = refactoring.RefactorElementNameFragment {}

            // provides the necessary bindings for java types integration
            fragment = types.TypesGeneratorFragment {}

            // generates the required bindings only if the grammar inherits from Xbase
            fragment = xbase.XbaseGeneratorFragment {}

            // provides a preference page for template proposals
            fragment = templates.CodetemplatesGeneratorFragment {}

            // provides a compare view
            fragment = compare.CompareFragment {
                 fileExtensions = file.extensions
            }

        }
    }
}
